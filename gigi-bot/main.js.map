{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/chat.service.ts","webpack:///./src/app/chat/chat-dialog/chat-dialog.component.css","webpack:///./src/app/chat/chat-dialog/chat-dialog.component.html","webpack:///./src/app/chat/chat-dialog/chat-dialog.component.ts","webpack:///./src/app/chat/chat.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".bg-container {\\n    background: url(\\\"https://kousiksiddhu.github.io/gigi-bot/gigi-bot/assets/background.jpg\\\");\\n    height: 100vh;\\n    background-position: center;\\n    background-size: cover;\\n}\"","module.exports = \"<div class=\\\"bg-container\\\">\\n    <div class=\\\"container\\\">\\n        <chat-dialog></chat-dialog>\\n    </div>\\n</div>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { ChatModule } from './chat/chat.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ChatModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\nimport { ApiAiClient } from 'api-ai-javascript';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n// Message class for displaying messages in the component\nexport class Message {\n  constructor(public content: string, public sentBy: string) {}\n}\n\n@Injectable()\nexport class ChatService {\n\n  readonly token = environment.dialogflow[\"gigi-bot\"];\n  readonly client = new ApiAiClient({ accessToken: this.token });\n\n  conversation = new BehaviorSubject<Message[]>([]);\n\n  constructor() {}\n\n  // Sends and receives messages via DialogFlow\n  converse(msg: string) {\n    const userMessage = new Message(msg, 'user');\n    this.update(userMessage);\n\n    return this.client.textRequest(msg)\n      .then(res => {\n        const speech = res.result.fulfillment.speech;\n        const botMessage = new Message(speech, 'bot');\n        this.update(botMessage);\n      });\n  }\n\n\n\n  // Adds message to source\n  update(msg: Message) {\n    this.conversation.next([msg]);\n  }\n\n}","module.exports = \"h1 {\\n    color: #fff;\\n    font-weight: bold;\\n}\\nlabel,input{\\n    color: #fff;\\n}\\n.message {\\n    border-radius: 50px;\\n    margin: 0 15px 10px;\\n    padding: 15px 20px;\\n    position: relative;\\n    font-weight: bold;\\n}\\n.message.to {\\n    background-color: #2095FE;\\n    color: #fff;\\n    margin-left: 100px;\\n    text-align: right;\\n}\\n.message.from {\\n    background-color: #E5E4E9;\\n    color: #363636;\\n    margin-right: 100px;\\n\\n}\\n.message.to + .message.to,\\n.message.from + .message.from {\\nmargin-top: -10px;\\n}\"","module.exports = \"<h1>GiGi Bot</h1>\\n\\n<ng-container *ngFor=\\\"let message of messages\\\">\\n\\n  <div class=\\\"message\\\" [ngClass]=\\\"{ 'from': message.sentBy === 'bot',\\n                                    'to':   message.sentBy === 'user' }\\\">\\n    {{ message.content }}\\n  </div>\\n\\n</ng-container>\\n\\n\\n<label for=\\\"nameField\\\">Your Message</label>\\n\\n\\n<input [(ngModel)]=\\\"formValue\\\" (keyup.enter)=\\\"sendMessage()\\\" type=\\\"text\\\">\\n\\n<button (click)=\\\"sendMessage()\\\">Send</button>\"","//import { scan } from 'rxjs/operator';\nimport { ChatService, Message } from './../../chat.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\n//import 'rxjs/add/operator/scan';\n\n\n@Component({\n  selector: 'chat-dialog',\n  templateUrl: './chat-dialog.component.html',\n  styleUrls: ['./chat-dialog.component.css']\n})\nexport class ChatDialogComponent implements OnInit, OnDestroy {\n\n  messages = [];//: Observable<Message[]>;\n  formValue: string;\n\n  constructor(public chat: ChatService) { }\n\n  ngOnInit() {\n    // appends to array after each new message is added to feedSource\n    // this.messages = this.chat.conversation.asObservable()\n    //     .scan((acc, val) => acc.concat(val) );\n    \n    this.chat.conversation.asObservable()\n      .subscribe(message => {\n        if(message.length)\n          this.messages.push(message[0]);\n      });\n  }\n\n  ngOnDestroy(){\n    this.chat.conversation.unsubscribe();\n  }\n\n  sendMessage() {\n    if(this.formValue)\n      this.chat.converse(this.formValue);\n    this.formValue = '';\n  }\n\n}\n","import { ChatService } from './../chat.service';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChatDialogComponent } from './chat-dialog/chat-dialog.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ChatDialogComponent],\n  exports: [ChatDialogComponent],\n  providers: [ChatService]\n})\nexport class ChatModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  dialogflow: {\n    \"gigi-bot\": \"9a1410a3f91b46dd999feaef733a98da\"\n  }\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}